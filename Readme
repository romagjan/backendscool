Здравствуйте!

Приложение равзернуто в контейнере products

запускается командой 
#sudo docker run --network=host  --name products romagjan/products
СУБД postgres установлена отдельно локально

миграция базы данных выполняется с помощью команд alembic 
сначала устанавливается модуль
#pip install -e '.[dev]'
затем выполняются команды
#products-db revision --message="Initial" --autogenerate 
#products-db upgrade head

после этого появляются необходимые таблицы для работы сервиса.
проверить какие есть таблицы можно с помощью скрипта 
#pgtest.py

для пересборки решения используются команды для упаковки 
#python3 setup.py sdist
сборка docker образа
docker build -t romagjan/products .

Тесты на крайние случаи и ошибки валидации проводятся лежат в папке tests и основаны на модуле, 
который с заданием прилагался

За основу решения брался flask и SQLAlchemy. Для хранения дерева в формате nested set - модуль sqlalchemy_mptt
При создании или обновлении записи сначала загружается дата, затем на основе id грузятся офферы и категории.
Далее обновляются цены категорий и записывается история изменений.

В Category хранится последняя информация по дереву категорий, в Products - последняя информация по загруженному товару.
ключ id товара или категории являются уникальными. В таблицах CategoryHistory OfferHistory первичный ключ составной.

Операция добавления выходит немного дороже, так как необходимо обновить левые и правые границы для оставшихся справа категорий.
Зато для запроса статистики или обновлений необходим всего один select для запроса дерева каегорий и по одному запросу на узел для запроса товаров.
Для статистики возвращаются пока только заказы без использования фильтра по времени.

как пример приложения использовался проект https://github.com/alvassin/backendschool2019

Спасибо за задание!

